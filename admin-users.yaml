swagger: "2.0"
info:
  description: "eMooks is a mobile application that synchronizes texts and images of books (fairy tales or comics) with music, sound effects, and background noise. this document is for admin portal of emook application."
  version: "1.0.0"
  title: "Emook Admin"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "192.168.1.1"
basePath: "/v1"
tags:
- name: "Admin"
  description: "Administrator level user management"
  externalDocs:
    description: "Find out more"
    url: "https://tiltlabs.atlassian.net/wiki/spaces/E/pages/2555924/Backend+Admin+Website+Features"

- name: "User"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our app"
    url: "https://tiltlabs.atlassian.net/wiki/spaces/E/pages/983042/eMooks+amplify+reading"
schemes:
- "https"
- "http"
paths:
  /admin:
    post:
      tags:
      - "Admin"
      summary: "Add a new admin to the administrators"
      description: ""
      operationId: "addAdmin"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Admin object that needs to be added to the Administrators"
        required: true
        schema:
          $ref: "#/definitions/Admin"
      responses:
        405:
          description: "Invalid input"
        201:
          description: "Created successfully"
      security:
      - admin_auth:
        - "write:administrators"
        - "read:administrators"
    put:
      tags:
      - "Admin"
      summary: "Update an existing admin user"
      description: ""
      operationId: "updateAdmin"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        type: "integer"
        name: "id"
        description: "Admin id to update"
        required: true
      - in: "body"
        name: "body"
        description: "Admin object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Admin"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Admin not found"
        405:
          description: "Validation exception"
      security:
      - admin_auth:
        - "write:administrators"
        - "read:administrators"
    get: 
      tags:
      - "Admin"
      summary: "Find all admin users"
      description: "Returns list of all admin users"
      operationId: "getAllAdmin"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            allOf:
              - $ref: "#/definitions/Pagination"
              - properties:
                  results:
                    type: "array"
                    items: 
                      $ref: "#/definitions/Admin"
  /admin/change-password:
    post:
      tags:
      - "Admin"
      summary: "change my password"
      description: ""
      operationId: "changePassword"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Password that needs to be changed to the user"
        required: true
        schema:
          $ref: "#/definitions/ChangePassword"
      responses:
        405:
          description: "Invalid input"
        201:
          description: "Created successfully"
      security:
      - admin_auth:
        - "write:administrators"
        - "read:administrators"

  /admin/{adminId}:
    get:
      tags:
      - "Admin"
      summary: "Find Admin by ID"
      description: "Returns a single Admin"
      operationId: "getAdminById"
      produces:
      - "application/json"
      parameters:
      - name: "adminId"
        in: "path"
        description: "ID of admin to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Admin"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
      - admin_auth:
        - "write:administrators"
        - "read:administrators"

    delete:
      tags:
      - "Admin"
      summary: "Deletes a pet"
      description: ""
      operationId: "deleteAdmin"
      produces:
      - "application/json"
      parameters:
      - name: "adminId"
        in: "path"
        description: "Admin id to delete"
        required: true
        type: "integer"
        format: "int64"
      - name: "Authorization"
        in: "header"
        required: false
        type: "string"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Admin not found"
      security:
      - admin_auth:
        - "write:administrators"
        - "read:administrators"

  /user:
    post:
      tags:
      - "User"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
    get:
      tags:
      - "User"
      summary: "Get all users list"
      description: ""
      operationId: "getAllUsers"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            allOf:
              - $ref: "#/definitions/Pagination"
              - properties:
                  results:
                    type: "array"
                    items: 
                      $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
  /user/createWithArray:
    post:
      tags:
      - "User"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "User"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"

  /user/{userId}:
    get:
      tags:
      - "User"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The id that needs to be fetched. Use 1 for testing. "
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "User"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "id that need to be updated"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "User"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "The id that needs to be deleted"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
securityDefinitions:
  admin_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:administrators: "modify administrators in your account"
      read:administrators: "read your administrators"
  api_key:
    type: "apiKey"
    name: "Authorization"
    in: "header"
definitions:
  Pagination:
    type: "object"
    properties:
      total:
        type: "string"
        example: "200"
      page:
        type: "string"
        example: "1"
      page_size:
        type: "string"
        example: "1"
  ChangePassword:
    type: "object"
    properties:
      current_password:
        type: "string"
      password:
        type: "string"

  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      first_name:
        type: "string"
        example: "Anna"
      last_name:
        type: "string"
        example: "Mull"
      email:
        type: "string"
        example: "annamull2020@example.com"
      phone:
        type: "string"
        example: "185969685"
      gender:
        type: "string"
        enum:
        - "Female"
        - "Male"
    
      dob:
        type: "string"
        example: "01/01/1999"
      age:
        type: "string"
        example: "21"
      country:
        type: "object"
      display_language:
        type: "object"
      is_disabled:
        type: "boolean"
        example: "false"

    xml:
      name: "User"

  Role:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "graphic_designer"
    xml:
      name: "Tag"
  Admin:
    type: "object"
    required:
    - "name"
    - "email"
    properties:
      id:
        type: "integer"
        format: "int64"
      full_name:
        type: "string"
        example: "John Doe"

      email:
        type: "string"
        example: "johndoe@example.com"
        
      designation:
        type: "string"
        example: "Graphic Designer"
        enum: 
        - "Administrator"
        - "Publisher"
        - "Author"
        - "Editor"
        - "Graphic Designer"
        - "Sound Designer"
        - "Marketing"
      is_disabled: 
        type: "boolean"
        example: "false"
  
      role:
        type: "array"
        items:
          $ref: "#/definitions/Role"
    xml:
      name: "admin"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"